{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue254;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c99608;\cssrgb\c100000\c100000\c100000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\fs28 \cf2 \cb3 import numpy as np\cb4 \
\cb3 import cvxpy as cp\cb4 \
\cb3 import scipy as sp\cb4 \
\cb3 import scipy.linalg as spla\cb4 \
\cb3 import matplotlib as mpl\cb4 \
\cb3 import control as ctrl\cb4 \
\cb3 import matplotlib.pyplot as plt\cb4 \
\cb3 from numpy import linalg as LA\cb4 \
\
\cb3 n = 1000 # Dimension of x (n=1000)\cb4 \
\cb3 m = 100 # Rows of A (m=100)\cb4 \
\
\cb3 # Random data\cb4 \
\cb3 x_var = cp.Variable(n)\cb4 \
\cb3 np.random.seed(1)\cb4 \
\cb3 A = np.random.randn(m, n)\cb4 \
\cb3 b = np.random.randn(m)\cb4 \
\
\cb3 #A transpose = A_T\cb4 \
\cb3 A_T = A.T\cb4 \
\cb3 C = A_T@b\cb4 \
\cb3 mu_max = LA.norm(C)\cb4 \
\cb3 print('mu max =',mu_max)\cb4 \
\cb3 z_increment = 1\cb4 \
\cb3 #z is mu from 0 to mu max\cb4 \
\cb3 z = np.arange(0,mu_max,z_increment)\cb4 \
\cb3 counter=0\cb4 \
\cb3 sp_x = []\cb4 \
\cb3 while counter < mu_max:\cb4 \
\cb3   mu = z[counter]\cb4 \
\cb3   counter+=1\cb4 \
\cb3   #Part i\cb4 \
\cb3   objective = cp.Minimize(0.5*cp.norm2(A@x_var - b)**2 + mu * cp.norm1(x_var))\cb4 \
\cb3   \cb4 \
\cb3   #Part ii\cb4 \
\cb3   #objective = cp.Minimize(0.5*cp.norm2((A@x_var*mu) - b)**2)\cb4 \
\
\cb3   problem = cp.Problem(objective)\cb4 \
\cb3   problem.solve()\cb4 \
\cb3   w = x_var.value\cb4 \
\cb3   non_0_x = sum(i > (10**-5) for i in w)\cb4 \
\cb3   sp_x_value = non_0_x/len(w)\cb4 \
\cb3   sp_x.append(sp_x_value)\cb4 \
\cb3   \cb4 \
\cb3 print('z length=',len(z),', sp(x) length =',len(sp_x))\cb4 \
\
\cb3 plt.suptitle('1i) sp(x) against mu')\cb4 \
\cb3 plt.ylabel('sp(x)')\cb4 \
\cb3 plt.xlabel('mu')\cb4 \
\cb3 plt.plot(z,sp_x)\cb4 \
\cb3 plt.savefig('sp(x) against mu')\cb4 \
\cb3 plt.show()}